

// *** variable concept *** 


ভ্যারিঅ্যাবল হচ্ছে ভ্যালু রাখার জায়গা বাঁ কনটেইনার । 

জাভাস্ক্রিপ্ট এ ভ্যারিঅ্যাবল তিনভাবে লিখতে হয়  যথা - 

// ১ । var - keyword
// ## declaration and Assign 

 var x = 5 ;

 এটাকে ভেঙ্গে লিখা যায় -

 var x ;   এটাকে  ভ্যারিঅ্যাবল declaration  বলে  ।
 x = 5 ;  এটাকে ভ্যারিঅ্যাবল এ ভ্যালু  Assign  করা বলে ।

 এটি  Hoisted হয় । 
 এর কোন ব্লক স্কোপ(Block scope)  নেই । ব্লক স্কোপেও  এটি গ্লোবাল স্কোপের মত কাজ করে । 

// ## Redeclaration and ReAssign 

ধরেন আমাদের কোড ইডিটরের গ্লোবাল স্কোপে একটা ভ্যারিঅ্যাবল লিখেছি - সেটা হল 

var x = 5 ; 
এখন আমরা চাইলে  এর ক্ষেত্রে   -Redeclare and ReAssign করতে পারব । 

var x = 6 ; 
এটাকে ভেঙ্গে লিখা যায় -

var x ;            এটাকে  ভ্যারিঅ্যাবল Redeclaration  বলে  ।

x = 6 ;           এটাকে ভ্যারিঅ্যাবল এ ভ্যালু  ReAssign  করা বলে ।


// ২। let - keyword 
//  ## declaration and Assign 

let x = 5 ;

এটাকে ভেঙ্গে লিখা যায় -

let  x ;   এটাকে বলে ভ্যারিঅ্যাবল declaration  করা ।
x = 5 ;   এটাকে বলে ভ্যারিঅ্যাবল এ ভ্যালু  Assign  করা ।

এটি  Hoisted হয় না । 
এর  ব্লক স্কোপ(Block scope)  আছে । ব্লক স্কোপের  বাইরে এটিকে এক্সেস করা যায় না  । 

// ## Redeclaration and ReAssign 

ধরেন আমাদের কোড ইডিটরের গ্লোবাল স্কোপে একটা ভ্যারিঅ্যাবল লিখেছি - সেটা হল 

let x = 5 ; 
এখন আমরা চাইলে এর ক্ষেত্রে   -Redeclare করতে পারব না কিন্তু  ReAssign করতে পারব  । 

// Redeclare
// let  x = 6 ;              Identifier 'x' has already been declared

এখানে এরর আসছে ভ্যারিঅ্যাবল কে Redeclare করা যাচ্ছে না । 
// ReAssign 

let x ;
x = 5 ;
x = 6 ;
console.log(x ); করলে দেখা যাবে যে আউটপুট আসবে 6
ভ্যারিঅ্যাবল এ ভ্যালু ReAssign  করলে আগের ভ্যালু এক্সেস করা যাবে না । 



// ৩।  const - keyword 
 const x = 5 ;
এটাকে ভেঙ্গে লিখা যায় না । 

একই নামে ভ্যারিঅ্যাবল Redeclaration  করা যাবে না । 
ভ্যারিঅ্যাবল  এর ভ্যালু  Re Assign  করা যাবে না  ।

এটি Hoisted হয় না  । 
এর  ব্লক স্কোপ(Block scope)  আছে । ব্লক স্কোপের  বাইরে এটিকে এক্সেস করা যায় না  । 




***  Scope in javascript ****

স্কোপ হচ্ছে একটা নির্দিষ্ট এরিয়া পর্যন্ত বিস্তৃত বাঁ একটা সীমাবদ্ধ জায়গার মধ্যে কোন একটা জিনিস কাজ করে ।

জাভাস্ক্রিপ্ট এ তিন ধরনের স্কোপ আছে - 

১। Global Scope -

যেকোনো কারলি ব্রাসেসের বাইরের  এরিয়াকে গ্লোবাল স্কোপ বলে । 

var x = 4 ;                           // global scope    

let x = 5 ;                          // global scope  

const x = 6  ;                        // global scope  

২। Function Scope -

কোন একটা ফাংশনের বডিকে Function Scope বলে - 

function A() {
    var x = 3;                       // function scope 
}

আমরা ফাংশন বডির বাইরে যেকোনো জায়গায় var লিখলে সেটা কোড ইডিটরের সব জায়গায় এক্সেস পাবে কিন্তু ফাংশন বডির ভিতরে কোন ভ্যারিঅ্যাবল বাইরে এক্সেস করা যাবে না । 

function A() {
    let  x = 3;                      // function scope 
}


function A() {
    const x = 3;                      // function scope 
}



৩। Block Scope -

Block Scope হচ্ছে এমন একটা এরিয়া যেটা { } কারলি ব্রাসেস মধ্যে সীমাবদ্ধ থাকে । যেমন - 

{
  const x = 2; 
}

এখন এই X এর এক্সেস শুধুমাত্র { } কারলি ব্রাসেস মধ্যে সীমাবদ্ধ থাকে , এর বাইরে X কাজ করবে না । 



{
    let x = 2;
} 

এখন এই X এর এক্সেস শুধুমাত্র { } কারলি ব্রাসেস মধ্যে সীমাবদ্ধ থাকে , এর বাইরে X কাজ করবে না । 




আমরা যদি ভ্যারিঅ্যাবল পরিবর্তন করে var নিলে ভিন্ন রকম ঘটনা ঘটবে ।
{
    var x = 3;
}
কারন আমরা জানি যখন কোন ভ্যারিঅ্যাবল
কে var কি ওয়ার্ড দিয়ে লিখি তখন এইটা গ্লোবাল স্কোপ অথবা ফাংশন  স্কোপ থাকে কিন্তু  সেটার কোন ব্লক স্কোপ থাকে না । 

যেকারনে কারলি ব্রাসেসের বাইরে X এক্সেস পাবে । 

*** Lexical scope  *** 

জাভাস্ক্রিপ্ট এ প্যারেন্ট এর সবকিছু তার চাইল্ড এক্সেস করতে পারে । সুতরাং গ্লোবাল স্কোপের সবকিছু ফাংশন স্কোপ বাঁ ব্লক স্কোপে এক্সেস করা যাবে  কিন্তু চাইল্ডের কোন কিছুতে আবার প্যারেন্ট এর এক্সেস নাই ।

var num1 = 3;
var num2 = 4;

var sum = function(){
    return num1 + num2 ;
};

console.log(sum());                           output //     7 

এখন মনে হতে পারে var num1 = 3 , var num2 = 4 এক্সেস কিভাবে লোকাল স্কোপ বাঁ ফাংশন স্কোপ পেল । আমরা তো এখানে প্যারামিটারই পাস করি নাই ।  এটাই হচ্ছে প্যারেন্ট স্কোপ থেকে লোকাল স্কোপে এক্সেস পেয়েছে । এটাকে লেক্সিকাল স্কোপিং বলে । 



